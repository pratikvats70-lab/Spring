plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.4'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '1.0.0-SNAPSHOT'
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JAXB à¤”à¤° SOAP dependencies
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
    implementation 'jakarta.xml.soap:jakarta.xml.soap-api:3.0.2'
    implementation 'jakarta.xml.ws:jakarta.xml.ws-api:3.0.1'

    // CXF dependencies
    implementation 'org.apache.cxf:cxf-rt-frontend-jaxws:4.0.3'
    implementation 'org.apache.cxf:cxf-rt-transports-http:4.0.3'
}

// Configuration for CXF tools
configurations {
    cxfTools
}

dependencies {
    // CXF tools for WSDL2Java
    cxfTools 'org.apache.cxf:cxf-tools-wsdlto-core:4.0.3'
    cxfTools 'org.apache.cxf:cxf-tools-wsdlto-frontend-jaxws:4.0.3'
    cxfTools 'org.apache.cxf:cxf-tools-wsdlto-databinding-jaxb:4.0.3'
    cxfTools 'org.apache.cxf:cxf-rt-frontend-jaxws:4.0.3'
    cxfTools 'org.apache.cxf:cxf-rt-transports-http:4.0.3'
    cxfTools 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.4'
    cxfTools 'org.glassfish.jaxb:jaxb-runtime:4.0.4'
}

// Direct WSDL2Java task - Gradle 8.13 compatible
task wsdl2java {
    group = 'code generation'
    description = 'Generate Java classes from WSDL'

    def wsdlFile = file('src/main/resources/wsdl/customerService.wsdl')
    def outputDir = file("${project.buildDir}/generated-sources/wsdl2java")

    inputs.file wsdlFile
    outputs.dir outputDir

    doFirst {
        outputDir.deleteDir()
        outputDir.mkdirs()
    }

    doLast {
        println "ðŸš€ Generating classes from WSDL..."

        javaexec {
            classpath = configurations.cxfTools
            mainClass = 'org.apache.cxf.tools.wsdlto.WSDLToJava'

            args = [
                    '-verbose',
                    '-client',
                    '-server',
                    '-impl',
                    '-d', outputDir.absolutePath,
                    '-p', 'com.example.generated.ws',
                    '-autoNameResolution',
                    wsdlFile.absolutePath
            ]
        }

        println "âœ… WSDL2Java generation completed!"
    }
}

task addDefaultConstructors {
    dependsOn wsdl2java
    group = 'code generation'
    description = 'Add default constructors to generated classes'

    def outputDir = file("${project.buildDir}/generated-sources/wsdl2java")

    inputs.dir outputDir
    outputs.dir outputDir

    doLast {
        println "ðŸ”§ Adding default constructors..."

        outputDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { javaFile ->
            String content = javaFile.text
            String className = javaFile.name.replace('.java', '')

            // Check if it's a concrete class and doesn't have default constructor
            if (content.contains("public class ${className}") &&
                    !content.contains("public ${className}()") &&
                    !content.contains("interface ${className}") &&
                    !content.contains("abstract class ${className}")) {

                println "  âž• Adding default constructor to: ${className}"

                // Create default constructor
                String defaultConstructor = """
    /**
     * Default constructor for ${className}
     */
    public ${className}() {
        super();
    }
"""

                // Find the position after class declaration opening brace
                String classPattern = "(public class ${className}[^\\{]*\\{)"
                content = content.replaceFirst(classPattern, "\$1${defaultConstructor}")

                // Write back the modified content
                javaFile.text = content
            }
        }

        println "âœ… Default constructors added successfully!"

        // List generated classes with constructors
        outputDir.traverse(type: groovy.io.FileType.FILES, nameFilter: ~/.*\.java$/) { javaFile ->
            String className = javaFile.name.replace('.java', '')
            if (javaFile.text.contains("public ${className}()")) {
                println "  âœ“ ${className} - has default constructor"
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDir "${project.buildDir}/generated-sources/wsdl2java"
        }
    }
}

// Ensure proper task dependencies for Gradle 8.13
tasks.named('compileJava') {
    dependsOn addDefaultConstructors
}

tasks.named('processResources') {
    dependsOn addDefaultConstructors
}

// Ensure generation runs during build
tasks.named('build') {
    dependsOn addDefaultConstructors
}

// Clean generated sources
tasks.named('clean') {
    doLast {
        file("${project.buildDir}/generated-sources").deleteDir()
    }
}